# -*- coding: utf-8 -*-
"""desafio.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gCw1z192235UjtUkAqjfIA5MBFcEGYKG

# Classificação de Empresas com Solução em Tratamento de Água

# Descrição do arquivo Canada_amostra

**Arquivo canada_amostra.csv**

Descrições das colunas:

name: nome da empresa;

description: descrição do produto da empresa;

employees: número de empregados da empresa;

total_funding: Total de investimento já recebido pela empresa;

city: cidade;

subcountry: estado;

lat: latitude da cidade;

lng: Longitude da cidade.

# Pacote Principal
"""

import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression

"""# Pacote de Pré-processamento"""

# Pré-processamento do texto para converter para minúsculas; retirar pontuação e caracteres especiais; remover palavras curtas; e tokenizar.
def preprocesso(text):
    text = text.lower()  # Minúsculas
    text = text.replace("[^a-zA-Z0-9\s]", "")  # Remover pontuação
    words = text.split()  # Tokenizar
    words = [word for word in words if len(word) > 2]  # Remover palavras curtas
    text = " ".join(words)  # Reconstruir o texto
    return text

"""# Pacote de classificação"""

def classificar(data):
    # Separar os rótulos
    y = data["atende"] # atende é a variável target criada após o processo de classificação primário.
    # Aplicar pré-processamento
    data["description"] = data["description"].apply(preprocesso)

    # Vetorizar o texto
    # Eu utilizei o TF-IDF porque ele é um método de vetorização de texto que é eficaz para tarefas de classificação de texto.
    # O TF-IDF considera a frequência e importância de cada palavra no texto, o que é útil para identificar palavras que são relevantes
    # para o tema da classificação.
    vectorizer = TfidfVectorizer(max_features=1000)
    X = vectorizer.fit_transform(data["description"])

    # Treinamento do classificador
    # Um classificador de regressão logística é treinado para classificar empresas como alinhadas ou não alinhadas com o tema com base no texto de suas soluções.
    # Ou seja, atende == 1 e atende == 0
    classificador = LogisticRegression()
    classificador.fit(X, y)

    # Classificação das empresas
    empresas_classificadas = classificador.predict(X)

    # Seleção das empresas alinhadas ao tema
    empresas_selecionadas = data[empresas_classificadas == 1]

    return empresas_selecionadas

"""#Pacote Principal"""

def main():
  data = pd.read_csv("canada_amostra_OK.csv")
  # Se os pacotes criados (classificar e preprocesso) estivessem fora teriamos que importá-los com o comando import
  empresas_selecionadas = classificar(data)

  # Impressão das empresas selecionadas
  print("Empresas selecionadas:")
  for empresa in empresas_selecionadas.itertuples():
      print(f"* {empresa.name}: {empresa.description}")

if __name__ == "__main__":
  main()

"""# TESTES

# Teste 1: Validação do pré-processamento do texto
Este teste verifica se o pacote pode pré-processar o texto corretamente.
"""

def teste_preprocesso():
    # Criar um texto de teste
    texto = "Soluções de tratamento de água para melhorar a qualidade da água e a eficiência do uso da água"

    # Pré-processar o texto
    texto_preprocessado = preprocesso(texto)

    # Verificar se o texto foi pré-processado corretamente
    assert texto_preprocessado == "soluções tratamento água melhorar qualidade água eficiência uso água"

"""#Teste 2: Validação da classificação das empresas
Este teste verifica se o pacote pode classificar as empresas corretamente.


"""

def teste_classificar():
    # Criar um conjunto de dados de teste
    empresas = pd.DataFrame({
        "name": ["Empresa A", "Empresa B", "Empresa C"],
        "description": ["Soluções de tratamento de água", "Soluções de reciclagem de resíduos", "Soluções de irrigação"]
    })

    # Treinar o classificador
    classificador = classificar.train(empresas["description"], empresas["atende"])

    # Classificar as empresas
    empresas_classificadas = classificar.predict(empresas["description"])

    # Verificar se as empresas foram classificadas corretamente
    assert empresas_classificadas == [1, 0, 1]